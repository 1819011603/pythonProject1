import numpy as np
import matplotlib.pyplot as plt
import cv2 as cv
import scipy.ndimage.filters
from scipy import signal
import torch
import torch.nn as nn

plt.rcParams["font.family"] = "SimHei"


class tea_processd:
    def getnum(self, start,num):
        import openpyxl
        t = openpyxl.load_workbook("test_all_reflect1.xlsx", True).active
        y = []
        labels = []
        temp = [i for i in t.values]

        for i in range(start, start + num):
            y.append(temp[i][1:-1])
            labels.append(temp[i][-1])
        return np.array(y), np.array(labels)

    def line_chart(self, ypoints, humidity):
        """
        线型参数:ls  '‐' 实线，'‐‐' 破折线，'‐.' 点划线，':' 虚线。
        lw linewidth 线宽
        color 颜色
        
        """

        plt.plot(self.xpoints, ypoints, ls='solid', lw=2,)
        plt.legend()
        plt.xlabel(u"光照频率")
        plt.ylabel(u"光照强度")


    def __init__(self,start = 1, num=1):
        # self.tea = np.array([0.3502, 0.358, 0.3487, 0.3678, 0.3554, 0.3153, 0.374, 0.3557, 0.3519, 0.3598, 0.3608, 0.3508, 0.3501, 0.3374, 0.3589, 0.3503, 0.3424, 0.3516, 0.3532, 0.3595, 0.3488, 0.3517, 0.3616, 0.3426, 0.3517, 0.3491, 0.3573, 0.3506, 0.349, 0.355, 0.3635, 0.3578, 0.3563, 0.3546, 0.3603, 0.3605, 0.3639, 0.3616, 0.3652, 0.3545, 0.3654, 0.3609, 0.361, 0.3583, 0.3634, 0.3658, 0.3542, 0.3689, 0.3651, 0.3713, 0.3675, 0.3633, 0.3653, 0.3736, 0.3674, 0.3704, 0.3721, 0.3737, 0.3645, 0.3713, 0.3801, 0.3611, 0.3703, 0.3624, 0.3663, 0.3681, 0.359, 0.3559, 0.3669, 0.3481, 0.3517, 0.3494, 0.3561, 0.3414, 0.3467, 0.3418, 0.3536, 0.3355, 0.342, 0.3476, 0.3294, 0.3477, 0.3325, 0.3418, 0.324, 0.3431, 0.3335, 0.3332, 0.3316, 0.3333, 0.3368, 0.3347, 0.3277, 0.3316, 0.3379, 0.3264, 0.3383, 0.3318, 0.3336, 0.3323, 0.327, 0.3366, 0.3329, 0.3309, 0.3367, 0.3339, 0.3364, 0.3295, 0.3355, 0.3323, 0.3443, 0.3343, 0.3337, 0.3412, 0.3291, 0.3373, 0.3328, 0.3375, 0.3372, 0.3422, 0.33, 0.3341, 0.3332, 0.3311, 0.3341, 0.3361, 0.3322, 0.3293, 0.3267, 0.3269, 0.3255, 0.3214, 0.3206, 0.3175, 0.3216, 0.3155, 0.3131, 0.302, 0.3093, 0.3006, 0.3092, 0.2992, 0.3052, 0.3003, 0.2985, 0.3005, 0.2974, 0.2964, 0.2912, 0.2887, 0.2899, 0.2738, 0.2715, 0.2763, 0.2614, 0.2501, 0.2525, 0.2375, 0.2261, 0.2161, 0.2178, 0.2067, 0.2094, 0.205, 0.2018, 0.1811, 0.1983, 0.1883, 0.1926, 0.1881, 0.1851, 0.1835, 0.1931, 0.1708, 0.1926, 0.1763, 0.1826, 0.1826, 0.1667, 0.1809, 0.1864, 0.1763, 0.1928, 0.178, 0.1713, 0.1919, 0.1728, 0.1843, 0.1775, 0.1913, 0.184, 0.181, 0.1811, 0.1815, 0.1905, 0.1866, 0.1891, 0.1866, 0.1881, 0.1899, 0.2009, 0.1884, 0.1973, 0.1861, 0.1984, 0.1967, 0.1963, 0.2065, 0.2017, 0.2019, 0.205, 0.2078, 0.2135, 0.2031, 0.211, 0.2058, 0.2159, 0.2139, 0.2129, 0.2182, 0.2175, 0.2087, 0.2248, 0.2159, 0.2236, 0.2183, 0.2259, 0.219, 0.2236, 0.2254, 0.2289, 0.2279, 0.2233, 0.2367, 0.2246, 0.2363, 0.232, 0.2309, 0.2319, 0.2278, 0.2371, 0.2416, 0.2249, 0.2407, 0.2327, 0.2356, 0.2392, 0.2284, 0.2417, 0.2396, 0.241, 0.2386, 0.2382, 0.2424, 0.2483, 0.2424, 72],dtype=np.float)
        # self.humidity = self.tea[-1]
        # self.tea = self.tea[:-1]
        self.tea, self.humidity = self.getnum(start,num)
        self.xpoints = np.array(
            [919.8078, 923.907776, 927.984375, 932.037781, 936.068176, 940.075684, 944.060486, 948.022827, 951.96283,
             955.880676, 959.776611, 963.650696, 967.503235, 971.33429, 975.144104, 978.9328, 982.700623, 986.447754,
             990.174316, 993.880432, 997.566467, 1001.232483, 1004.878601, 1008.505066, 1012.112122, 1015.699829,
             1019.268433, 1022.817993, 1026.348755, 1029.861206, 1033.354858, 1036.830566, 1040.288208, 1043.727661,
             1047.14978, 1050.554077, 1053.94104, 1057.311157, 1060.66394, 1063.999878, 1067.319458, 1070.622314,
             1073.908936, 1077.179688, 1080.434204, 1083.673096, 1086.896362, 1090.104248, 1093.296875, 1096.474609,
             1099.637207, 1102.7854, 1105.918945, 1109.038086, 1112.143188, 1115.234253, 1118.311523, 1121.375122,
             1124.425293, 1127.462402, 1130.486206, 1133.496948, 1136.495239, 1139.480713, 1142.453979, 1145.415161,
             1148.364014, 1151.301147, 1154.226685, 1157.140503, 1160.043213, 1162.934692, 1165.815308, 1168.684937,
             1171.544189, 1174.392822, 1177.231323, 1180.059692, 1182.878052, 1185.686768, 1188.486084, 1191.275879,
             1194.056519, 1196.828125, 1199.590942, 1202.345093, 1205.09082, 1207.828247, 1210.557373, 1213.278687,
             1215.99231, 1218.69812, 1221.396606, 1224.087891, 1226.771973, 1229.449341, 1232.120117, 1234.784058,
             1237.441772, 1240.093384, 1242.738892, 1245.37854, 1248.012817, 1250.641357, 1253.264648, 1255.883057,
             1258.496216, 1261.104736, 1263.708862, 1266.30835, 1268.903687, 1271.494995, 1274.082397, 1276.66626,
             1279.24646, 1281.823364, 1284.397095, 1286.967773, 1289.535889, 1292.101196, 1294.664062, 1297.224731,
             1299.783325, 1302.339722, 1304.894775, 1307.447998, 1310, 1312.550659, 1315.100342, 1317.649292,
             1320.197388, 1322.745117, 1325.292358, 1327.839722, 1330.386841, 1332.934326, 1335.4823, 1338.030762,
             1340.579834, 1343.130005, 1345.681396, 1348.233643, 1350.787598, 1353.343262, 1355.900391, 1358.459961,
             1361.021606, 1363.585449, 1366.151611, 1368.720947, 1371.292725, 1373.867676, 1376.446045, 1379.02771,
             1381.612915, 1384.202026, 1386.794922, 1389.391968, 1391.993408, 1394.599243, 1397.209717, 1399.825195,
             1402.445312, 1405.070801, 1407.70166, 1410.338135, 1412.980103, 1415.628296, 1418.282227, 1420.942627,
             1423.609375, 1426.282837, 1428.962769, 1431.649902, 1434.344238, 1437.045532, 1439.754761, 1442.471558,
             1445.196045, 1447.928345, 1450.669312, 1453.418335, 1456.176025, 1458.942505, 1461.717773, 1464.502197,
             1467.295776, 1470.098877, 1472.911743, 1475.734253, 1478.56665, 1481.409302, 1484.262329, 1487.125732,
             1489.999878, 1492.88501, 1495.781006, 1498.688232, 1501.607056, 1504.537354, 1507.479248, 1510.433105,
             1513.39917, 1516.377441, 1519.368164, 1522.371704, 1525.387695, 1528.417114, 1531.459473, 1534.515137,
             1537.584229, 1540.667236, 1543.764038, 1546.874878, 1550, 1553.139648, 1556.293457, 1559.462402,
             1562.64624, 1565.845093, 1569.059326, 1572.289062, 1575.53418, 1578.795654, 1582.072632, 1585.365967,
             1588.675659, 1592.001953, 1595.344849, 1598.704834, 1602.081787, 1605.47583, 1608.887573, 1612.316772,
             1615.763672, 1619.228638, 1622.711914, 1626.213013, 1629.73291, 1633.271729, 1636.828979, 1640.405273,
             1644.000977, 1647.616089, 1651.25061, 1654.905029, 1658.578979, 1662.273193, 1665.988037, 1669.722778,
             1673.478271, 1677.254883, 1681.052368, 1684.870728, 1688.710693, 1692.572144], dtype=np.float)

    def med_filtering(self, tea, humidity):
        ans = signal.medfilt(tea, 3)
        # self.line_chart(ans, humidity)
        # self.detrend(ans, humidity)
        return ans


    def wiener_filtering(self, tea, humidity):
        ans = signal.wiener(tea)
        # self.detrend(ans, humidity)
        return ans
    def mean_filtering(self,tea,humidity):
        ans = np.convolve(tea,np.ones(3)/3,mode="same")
        # self.line_chart(ans, humidity)
        # self.detrend(ans, humidity)
        return ans
    def gaussian_filtering(self, tea, humidity):
        ans = scipy.ndimage.filters.gaussian_filter(tea, sigma=1.2, mode="nearest")
        # self.line_chart(ans, humidity)
        # self.detrend(ans,humidity)
        return ans
    def detrend(self, ans, humidity):
        ans = signal.detrend(ans)  # 去除非线性趋势
        return ans
        # self.line_chart(ans+0.2, humidity)


if __name__ == '__main__':
    num = 420
    t = tea_processd(1,num)

    for i in range(num):

        tea = t.tea[i]

        # t.line_chart(tea, t.humidity[i])
        # t.line_chart(t.tea,t.humidity)
        # t.med_filtering(tea, t.humidity[i])
        # t.mean_filtering(tea, t.humidity[i])

        tea = t.gaussian_filtering(tea, t.humidity[i])
        tea = t.wiener_filtering(tea,t.humidity)
        tea = t.detrend(tea,humidity=t.humidity[i])
        t.line_chart(tea, t.humidity[i])
    # t.wiener_filtering()
    plt.show()


